{"kernelspec":{"display_name":"Python 3 (Anaconda)","language":"python","name":"anaconda3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.3"}}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"0.19.2\n1.11.3\n['OfferInformation', 'Transactions', 'Pivot', 'Matrix', '4MC', '4MC - TopDealsByCluster', 'Distances', '4MC Silhouette', '5MC', '5MC - TopDealsByCluster', '5MC Silhouette', '5MedC', '5MedC - TopDealsByCluster']\n"}],"source":"import pandas as pd\nimport numpy as np\nfrom IPython.display import display\n\n# check pandas version\nprint(pd.__version__)\n# check numpy version\nprint(np.__version__)\n\n# read WineKMC spreadsheet data to Pandas dataframe \nwinekmc = pd.ExcelFile(\"WineKMC.xlsx\")\n# display all the sheets available in WineKMC.xlsx \nprint(winekmc.sheet_names)"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Total Offer # : 32\n"},{"data":{"text/html":"smc-blob::389895da-cba2-4e89-9a79-732c212de2b2","text/plain":"smc-blob::396d9265-729f-4616-aede-9843cd864f02"},"metadata":{},"output_type":"display_data"}],"source":"# have a peak of the OfferInformation sheet data\ndf_offerinfo = winekmc.parse(\"OfferInformation\")\nprint(\"Total Offer # : %d\" % len(df_offerinfo))\n\n# make sure the Offer number column is in sorted in order\ndf_offerinfo.sort_values(\"Offer #\", axis=0, inplace=True)\ndisplay(df_offerinfo.head())"}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Total number of transactions: 324\n"},{"data":{"text/html":"smc-blob::5485da98-e8bd-4beb-b019-7a1ca84d3ced","text/plain":"  Customer Last Name  Offer #\n0              Smith        2\n1              Smith       24\n2            Johnson       17\n3            Johnson       24\n4            Johnson       26"},"metadata":{},"output_type":"display_data"}],"source":"# have a peak of the Transactions sheet data\ndf_transaction = winekmc.parse(\"Transactions\")\nprint(\"Total number of transactions: %d\" % len(df_transaction))\ndisplay(df_transaction.head())"}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"scrolled":false,"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::5b851001-07a7-491d-922d-dab74180d930","text/plain":"smc-blob::10f973d3-248d-4b09-ba93-6e7c5181f089"},"metadata":{},"output_type":"display_data"},{"data":{"text/html":"smc-blob::8e1d79fe-c283-4387-8a7f-fc5ef612bc75","text/plain":"smc-blob::ab629e85-2e81-46b3-82a1-3b6aaf414f60"},"metadata":{},"output_type":"display_data"}],"source":"# dont know why aggfunc='count' doesn't work\ndf_transaction_pivot = pd.pivot_table(df_transaction, index='Offer #', columns='Customer Last Name', aggfunc=len, fill_value=0)\ndisplay(df_transaction_pivot.head())\n# save the pivot table for later use\ncpy_df_transaction_pivot = df_transaction_pivot.copy(deep=True)\n\n# convert pivot table to dataframe\ndf_transaction_pivot = pd.DataFrame(df_transaction_pivot.to_records())\ndisplay(df_transaction_pivot.head())"}
{"cell_type":"code","execution_count":5,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::48dc5ec6-296c-48b5-a285-e9c61768b010","text/plain":"smc-blob::d7ee1d96-5c22-47a2-956f-8487225830eb"},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":"Total Offer # : 32\n"}],"source":"# stitch the pivot trasaction table to the Offer Info table\ndf_offerinfo = df_offerinfo.join(df_transaction_pivot.drop('Offer #', axis=1))\ndisplay(df_offerinfo.head())\n\n# confirm same number of records (rows) as before\nprint(\"Total Offer # : %d\" % len(df_offerinfo))"}
{"cell_type":"code","execution_count":6,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::adb9377a-7286-4b7d-a1a0-c1c9778959a2","text/plain":"smc-blob::ec88c56a-5625-464b-8b2f-7be432c913fa"},"metadata":{},"output_type":"display_data"},{"data":{"text/html":"smc-blob::8c8ef91d-e23a-45ac-98d7-11e1278e441b","text/plain":"   1  2  3  4  5  6  7  8  9  10 ...  23  24  25  26  27  28  29  30  31  32\n0  0  0  0  0  0  0  0  0  0   0 ...   0   0   0   0   0   0   1   1   0   0\n1  0  0  0  0  0  0  0  0  1   0 ...   0   0   0   0   1   0   0   0   0   0\n2  0  0  0  0  0  0  0  0  0   0 ...   0   1   0   1   0   0   0   0   0   0\n3  0  0  0  0  0  0  1  0  0   0 ...   0   0   0   0   0   0   0   1   0   0\n4  0  0  0  0  0  0  1  0  0   1 ...   0   0   0   0   0   0   0   0   1   0\n\n[5 rows x 32 columns]"},"metadata":{},"output_type":"display_data"}],"source":"from sklearn.cluster import KMeans\n\n# so far we made the Offer Info table same as Data Smart Ch02\n# but the set-up is different in scikit-learn\n# inputs in scikit-learn:\n# features: Offer #\n# samples: Ppl who bought the beers based on the Offer#\n\n# redo the input table\ninputs = cpy_df_transaction_pivot.transpose()\ninputs = pd.DataFrame(inputs.to_records())\ndisplay(inputs.head())\n\n# to feed the inputs to scikit-learn's KMean, we need to drop the Customer Last Name column\nX = inputs.drop('Customer Last Name', axis=1)\ndisplay(X.head())"}
{"cell_type":"code","execution_count":36,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::64d44099-9204-4ddc-b06e-8b30919f6997","text/plain":"   Customer  Cluster\n0     Adams        3\n1     Allen        0\n2  Anderson        2\n3    Bailey        3\n4     Baker        0"},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":"Total Distance 216.954365\n"}],"source":"# Data Smart Ch02 first set cluster number to 4\nk = 4\nkmeans = KMeans(n_clusters=k, random_state=42).fit(X)\nlabels = pd.DataFrame(kmeans.labels_)\nlabels.columns = [\"labels\"]\n\n# Now let's check which person belongs to which cluster\nresult = pd.concat([inputs['Customer Last Name'], labels], axis=1)\nresult.columns = ['Customer', 'Cluster']\ndisplay(result.head())\nprint(\"Total Distance %f\" % kmeans.inertia_)"}
{"cell_type":"code","execution_count":37,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::a72c4136-ee2f-4ee7-9274-5b8c630b2095","text/plain":"smc-blob::64371752-3618-4b50-be69-1017453cd08f"},"metadata":{},"output_type":"display_data"}],"source":"# Now let's display the customers in each cluster\ndf = []\nheader = []\n\nfor l in range(k):\n    df.append(pd.DataFrame((result.loc[result['Cluster']==l])['Customer']))\n    df[l].reset_index(drop=True, inplace=True)\n    header.append(\"Cluster %d\" % l)\n\ncluster_result = pd.concat(df, axis=1)\ncluster_result.columns = [header]\ndisplay(final_result)"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":""}
{"cell_type":"code","execution_count":53,"metadata":{"collapsed":false,"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Mean Silhouette Coefficient of all samples: 0.096703\n[ 0.30236879  0.04682806  0.41194274  0.18842422  0.08510343 -0.05932899\n  0.4579475  -0.03465615 -0.05521847  0.27562272 -0.02291999  0.41143448\n  0.2721175  -0.05149472  0.12235792  0.41194274  0.0439342   0.4579475\n  0.24582713 -0.07057422  0.27838392  0.08250444 -0.08400892  0.05339914\n  0.33855435 -0.01086849  0.03265944 -0.07738535  0.0842914  -0.1058091\n  0.04779601  0.01545853 -0.00831872 -0.05887149 -0.00667455  0.22582146\n -0.01035331  0.27616887  0.00484108  0.2502448   0.41194274  0.44698345\n  0.10186102  0.07033092  0.14223712 -0.01251696  0.20205291  0.05534387\n -0.06154569 -0.13920515  0.03454864  0.00435924  0.08429896  0.33855435\n  0.06920409 -0.03465615  0.44698345  0.05368037  0.2376624   0.09981051\n  0.07774339  0.10186102 -0.08172854  0.2376624   0.29157462  0.12461961\n  0.33855435  0.03084904 -0.03369012  0.05306987  0.04245384  0.03964042\n -0.06264048 -0.06007367  0.07112583 -0.07321271  0.25123199  0.04466879\n  0.00803448  0.17074017 -0.01868425 -0.00643959  0.04542025  0.27456857\n  0.246893   -0.08140225  0.31317903 -0.05596046  0.05888644  0.10186102\n -0.10134556  0.081218    0.0426872  -0.07321271 -0.09208915 -0.07832227\n  0.16057512 -0.08838956  0.05794368 -0.00898243]\n[]\nThere are 33 over 100 samples that are put in the wrong cluster\n"}],"source":"# checking the silhouette score for the 4 cluster solution\nfrom sklearn.metrics import silhouette_score, silhouette_samples\n\nsilhouette = silhouette_score(X, np.array(labels[\"labels\"]))\nprint(\"Mean Silhouette Coefficient of all samples: %f\" % silhouette)\n\n# the mean silhouette score of all samples are close to 0, pretty bad eh, isn't ?\n# now let's look at the silhouette score of each sample\nsilhouettes = silhouette_samples(X, np.array(labels[\"labels\"]))\nprint (silhouettes)\n\n# None of our samples as a silhouette score > 0.5 !!!\nprint([s for s in silhouettes if s>0.5])\n\n# Many samples are also put in the wrong cluster according to silhouette score\nprint(\"There are %d over %d samples that are put in the wrong cluster\" % ( len([s for s in silhouettes if s<0]), len(X)) )"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"trusted":true},"outputs":[],"source":""}